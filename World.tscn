[gd_scene load_steps=18 format=2]

[ext_resource path="res://levels/Game.tscn" type="PackedScene" id=1]
[ext_resource path="res://levels/BlurLayer.gd" type="Script" id=2]
[ext_resource path="res://banner.png" type="Texture" id=3]
[ext_resource path="res://fog.gdshader" type="Shader" id=4]
[ext_resource path="res://gui/DebugFPS.tscn" type="PackedScene" id=5]
[ext_resource path="res://characters/player/light_mask2d.png" type="Texture" id=6]
[ext_resource path="res://oil-6-1x.png" type="Texture" id=7]
[ext_resource path="res://levels/interfaces/LightMask2D.tscn" type="PackedScene" id=8]
[ext_resource path="res://environment.tres" type="Environment" id=9]
[ext_resource path="res://bayer4tile8.png" type="Texture" id=10]

[sub_resource type="CanvasItemMaterial" id=6]
blend_mode = 3

[sub_resource type="Shader" id=7]
code = "/* 
This shader is under MIT license. Feel free to use, improve and 
change this shader according to your needs and consider sharing 
the modified result to godotshaders.com.
*/

shader_type canvas_item;

uniform sampler2D u_dither_tex;
uniform sampler2D u_color_tex;

uniform int u_bit_depth;
uniform float u_contrast;
uniform float u_offset;
uniform int u_dither_size;

void fragment() 
{
	// sample the screen texture at the desired output resolution (according to u_dither_size)
	// this will effectively pixelate the resulting output
	vec2 screen_size = vec2(textureSize(TEXTURE, 0)) / float(u_dither_size);
	vec2 screen_sample_uv = floor(UV * screen_size) / screen_size;
	vec3 screen_col = texture(TEXTURE, screen_sample_uv).rgb;
	
	// calculate pixel luminosity (https://stackoverflow.com/questions/596216/formula-to-determine-brightness-of-rgb-color)
	float lum = (screen_col.r * 0.299) + (screen_col.g * 0.587) + (screen_col.b * 0.114);
	
	// adjust with contrast and offset parameters
	float contrast = u_contrast;
	lum = (lum - 0.5 + u_offset) * contrast + 0.5;
	lum = clamp(lum, 0.0, 1.0);
	
	// reduce luminosity bit depth to give a more banded visual if desired	
	float bits = float(u_bit_depth);
	lum = floor(lum * bits) / bits;
	
	// to support multicolour palettes, we want to dither between the two colours on the palette
	// which are adjacent to the current pixel luminosity.
	// to do this, we need to determine which 'band' lum falls into, calculate the upper and lower
	// bound of that band, then later we will use the dither texture to pick either the upper or 
	// lower colour.
	
	// get the palette texture size mapped so it is 1px high (so the x value however many colour bands there are)
	ivec2 col_size = textureSize(u_color_tex, 0);
	col_size /= col_size.y;
	
	float col_x = float(col_size.x) - 1.0; // colour boundaries is 1 less than the number of colour bands
	float col_texel_size = 1.0 / col_x; // the size of one colour boundary
	
	lum = max(lum - 0.00001, 0.0); // makes sure our floor calculation below behaves when lum == 1.0
	float lum_lower = floor(lum * col_x) * col_texel_size;
	float lum_upper = (floor(lum * col_x) + 1.0) * col_texel_size;
	float lum_scaled = lum * col_x - floor(lum * col_x); // calculates where lum lies between the upper and lower bound
	
	// map the dither texture onto the screen. there are better ways of doing this that makes the dither pattern 'stick'
	// with objects in the 3D world, instead of being mapped onto the screen. see lucas pope's details posts on how he 
	// achieved this in Obra Dinn: https://forums.tigsource.com/index.php?topic=40832.msg1363742#msg1363742
	ivec2 noise_size = textureSize(u_dither_tex, 0);
	vec2 inv_noise_size = vec2(1.0 / float(noise_size.x), 1.0 / float(noise_size.y));
	vec2 noise_uv = UV * inv_noise_size * vec2(float(screen_size.x), float(screen_size.y));
	float threshold = texture(u_dither_tex, noise_uv).r;
	
	// adjust the dither slightly so min and max aren't quite at 0.0 and 1.0
	// otherwise we wouldn't get fullly dark and fully light dither patterns at lum 0.0 and 1.0
	threshold = threshold * 0.99 + 0.005;
	
	// the lower lum_scaled is, the fewer pixels will be below the dither threshold, and thus will use the lower bound colour,
	// and vice-versa
	float ramp_val = lum_scaled < threshold ? 0.0f : 1.0f;
	// sample at the lower bound colour if ramp_val is 0.0, upper bound colour if 1.0
	float col_sample = mix(lum_lower, lum_upper, ramp_val);
	vec3 final_col = texture(u_color_tex, vec2(col_sample, 0.5)).rgb;
	
	// return the final colour!
	COLOR.rgb = final_col;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/u_bit_depth = 64
shader_param/u_contrast = 1.4
shader_param/u_offset = 0.05
shader_param/u_dither_size = 1
shader_param/u_dither_tex = ExtResource( 10 )
shader_param/u_color_tex = ExtResource( 7 )

[sub_resource type="ShaderMaterial" id=3]
shader = ExtResource( 4 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/OCTAVES = 4

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float blur_amount : hint_range(0, 5);

void fragment() {
	COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, blur_amount);
}"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 2 )
shader_param/blur_amount = 2.837

[sub_resource type="Animation" id=5]
resource_name = "blur"
length = 5.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8, 1.6, 2.6, 3.4, 4.2 ),
"transitions": PoolRealArray( 1.41421, 1.41421, 1.41421, 1.41421, 1.41421, 1.41421 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[node name="World" type="Node2D"]

[node name="Notifications" type="CanvasLayer" parent="."]

[node name="DebugFPS" parent="." instance=ExtResource( 5 )]
layer = 9

[node name="LightMaskLayer" type="CanvasLayer" parent="."]

[node name="TextureRect" type="TextureRect" parent="LightMaskLayer"]
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0
rect_pivot_offset = Vector2( 160, 90 )
texture = ExtResource( 6 )
expand = true
stretch_mode = 7
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="LightMask2D" parent="CanvasLayer" instance=ExtResource( 8 )]
visible = false
modulate = Color( 1, 1, 1, 0.109804 )
position = Vector2( 128, 98 )
scale = Vector2( 1, 1 )

[node name="ViewportContainer" type="ViewportContainer" parent="."]
material = SubResource( 8 )
margin_right = 320.0
margin_bottom = 180.0
rect_scale = Vector2( 6, 6 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="ViewportContainer"]
size = Vector2( 320, 180 )
transparent_bg = true
handle_input_locally = false
render_target_update_mode = 3
audio_listener_enable_2d = true
audio_listener_enable_3d = true

[node name="Game" parent="ViewportContainer/Viewport" instance=ExtResource( 1 )]

[node name="Fog" type="ParallaxBackground" parent="ViewportContainer/Viewport"]
layer = 2
scroll_base_scale = Vector2( 1.25, 1.25 )
scroll_ignore_camera_zoom = true

[node name="FogLayer" type="ParallaxLayer" parent="ViewportContainer/Viewport/Fog"]

[node name="FogSprite" type="Sprite" parent="ViewportContainer/Viewport/Fog/FogLayer"]
material = SubResource( 3 )
position = Vector2( 142.664, 73.2773 )
scale = Vector2( 1.36856, 1.33884 )
z_as_relative = false
texture = ExtResource( 3 )

[node name="BlurLayer" type="CanvasLayer" parent="ViewportContainer/Viewport"]
layer = 2
follow_viewport_enable = true
script = ExtResource( 2 )

[node name="BlurSprite" type="Sprite" parent="ViewportContainer/Viewport/BlurLayer"]
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 4 )
position = Vector2( 166.52, 85.153 )
scale = Vector2( 0.558786, 0.56 )
texture = ExtResource( 3 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="ViewportContainer/Viewport/BlurLayer/BlurSprite"]
anims/blur = SubResource( 5 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="ViewportContainer/Viewport"]
environment = ExtResource( 9 )
